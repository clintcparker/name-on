define("HubsExtension/ResourceMap/ViewModels/ResourceGroupMapBlade",["require","exports","f","o","ko","Fx/Composition/TemplateBlade","Fx/Controls/Essentials","HubsExtension/Browse/BrowseClientStrings","HubsExtension/ResourceMap/ResourceMapClientStrings","HubsExtension/_generated/BladeReferences","HubsExtension/_generated/ExtensionDefinition","HubsExtension/ArmHelpers/ArmApisStartup","HubsExtension/BrowseGrid2/BrowseBlades/ViewModels/BrowseBase","HubsExtension/BrowseGrid2/BrowseGrid2Startup","HubsExtension/HubsCommon","HubsExtension/ResourceMap/ResourceMapCommon"],(function(n,t,i,r,u,f,e,o,s,h,c,l,a,v,y,p){"use strict";r.defineProperty(t,"__esModule",{value:!0});var b=i.Base,nt=i.ViewModels,k=i.Composition.PartReference,d=b.Images.Polychromatic,g=i.ViewModels.Services.ResourceTypes,w=(function(){function n(){this.title=u.observable("");this._essentialsExpanded=u.observable(!0);this._lastDeploymentText=u.observable("")}return n.prototype.onInitialize=function(){var t=this,f=this.context,n=f.container,y=f.model,r=f.parameters,c;return n.icon(d.ResourceGroup()),c=l.makeResourceManagerTelemetry("ResourceGroupMapBlade"),this.browse=new a.BrowseViewModel(n),n.commandBar=this.browse.toolbar,this.essentials=e.create(n,{resourceId:r.id,includeTags:!0,left:[4,5,],right:[{label:s.resourceGroupSummaryLastDeploymentLabel,value:this._lastDeploymentText,onClick:function(){t.context.menu.switchItem("deployments")}},],expanded:this._essentialsExpanded,responsiveColumns:!0}),n.revealContent(),this._deploymentsView=y.deploymentsQueryCache.createView(n),u.reactor(n,(function(){var r=u.toJS(t._deploymentsView.items)||[],n,f;r.length>0?(n={},n[s.deploymentRunningState]=0,n[s.deploymentFailedState]=0,n[s.deploymentSucceededState]=0,r.forEach((function(t){var r=p.deploymentStatusDisplayTextLookup[t.properties.provisioningState.toLowerCase()],u=n[r];i.isNullOrUndefined(u)||(n[r]=u+1)})),f=i.forEachKey(n,(function(n,t,i){t>0&&i.push("{0} {1}".format(t,n))}),[]),t._lastDeploymentText(f.join(","))):t._lastDeploymentText(s.deploymentsListPartNoDeploymentsMessage)})),p.ResourceGroupClient.getResourceGroupWithStrings(r.id,c,!1).then((function(i){var e,u,f,c;t.title(i.name);t.subtitle=s.resourceGroup;e=i.managedBy;e&&t.essentials.addDynamicProperties([],[{label:s.ResourceGroup.managedBy,value:g.parseResourceDescriptor(e).resource,onClick:function(){n.openBlade(new h.ResourceMenuBladeReference({id:e}))}},]);switch((i.provisioningState||"").toLowerCase()){case"accepted":u=5;f=o.ProvisioningStates.accepted;break;case"deleting":u=2;f=o.ProvisioningStates.deleting;break;case"deleted":u=2;f=o.ProvisioningStates.deleted;break;case"failed":u=3;f=o.ProvisioningStates.failed;break;case"movingresources":u=4;f=o.ProvisioningStates.movingResources;break;default:u=0;f=""}return n.statusBar()&&n.statusBar().state!==0||n.statusBar({text:f,state:u}),t._deploymentsView.fetch({resourceGroupId:r.id}),c=function(){t._deploymentsView.refresh()},v.initializeColumns().then((function(){return t.browse.processInputs({listScope:r.id},{isNonCollapsible:!0,onRefresh:c})}))}))},n.prototype.onPin=function(){var n=this.context.parameters;return new k(y.resourceGroupPartName,n)},n})();w=__decorate([f.Decorator({htmlTemplate:"../Templates/ResourceGroupMapBlade.html",styleSheets:["../Templates/ResourceGroupMapBlade.css","../../../../Less/HubsExtensionBrowseStyles.css"],forExport:!0,isPinnable:!0,forAsset:{assetIdParameter:"id",assetType:c.AssetTypes.ResourceGroups.name}}),f.Pinnable.Decorator(),f.LegacyFeatures.Decorator({width:2})],w);t.ResourceGroupMapBlade=w}));
define("HubsExtension/_generated/adapters/blade/ResourceGroupMapBladeAdapter",["require","exports","o","Fx/Composition/ViewModelAdapters","HubsExtension/ResourceMap/ViewModels/ResourceGroupMapBlade"],(function(n,t,i,r,u){"use strict";i.defineProperty(t,"__esModule",{value:!0});var f=(function(n){function t(t,i,r){return n.call(this,t,i,r,u.ResourceGroupMapBlade)||this}return __extends(t,n),t})(r.ViewModelAdapter);t.ResourceGroupMapBladeAdapter=f}));
define("HubsExtension/_generated/Blades/ResourceGroupMapBlade.css",["require","exports"],(function(){"use strict";return".ext-blade-container{display:flex;flex-direction:column;width:100%;height:100%}.ext-blade-browse-container{display:flex;flex-direction:column;height:100%}"}));
define("HubsExtension/_generated/Blades/ResourceGroupMapBlade",["require","exports","o","HubsExtension/_generated/Blades/ResourceGroupMapBlade.css","HubsExtension/_generated/Blades/HubsExtensionBrowseStyles.css","HubsExtension/_generated/adapters/blade/ResourceGroupMapBladeAdapter"],(function(n,t,i,r,u){"use strict";i.defineProperty(t,"__esModule",{value:!0});t.blade={name:"ResourceGroupMapBlade",entryPoint:{module:"HubsExtension/_generated/adapters/blade/ResourceGroupMapBladeAdapter","export":"ResourceGroupMapBladeAdapter"},inputs:["id"],templateKeyInputs:["id"],viewModelName:"ResourceMap$ResourceGroupMapBladeAdapter",lenses:[],width:2,assetType:"ResourceGroups",assetIdInputProperty:"id",pinnable:!0,style:8,toolbar:{source:{valuesFrom:[{referenceType:0,property:"content.commandBar"}]}},templateBlade:{partSize:9,htmlTemplateInline:{file:"ResourceGroupMapBlade.html",content:'<div class="ext-blade-container"> <div data-bind="pcControl: essentials"><\/div> <div class="ext-blade-browse-container msportalfx-padding"> <div class="ext-hubs-browse-container" data-bind="with: browse"> <!-- ko if: infoBox() --> <div class="ext-hubs-browse-infobox" data-bind="pcControl: infoBox"><\/div> <!-- /ko --> <div class="ext-hubs-browse-filters"> <div class="ext-hubs-browse-resourcefilter" data-bind="pcControl: resourceFilter"><\/div> <!-- ko if: showGroupBy() --> <div class="ext-hubs-browse-groupBy msportalfx-hideonactivated" data-bind="pcControl: groupBy"><\/div> <!-- /ko --> <\/div> <div class="ext-hubs-browse-section"> <div class="ext-hubs-browse-count" data-bind="text: countMessage"><\/div> <!-- ko if: showAllCheckBox() --> <div class="ext-hubs-browse-showall" data-bind="pcControl: showAllCheckBox"><\/div> <!-- /ko --> <\/div> <!-- work around chrome bug where children in a flex layout don\'t pick up the right height --> <div data-bind="css: {\'ext-hubs-browse-grid-parent\': !isEmptyGrid(), \'ext-hubs-browse-hidegrid\': isEmptyGrid() }"> <div class="ext-hubs-browse-grid" data-bind="pcControl: gridViewModel"><\/div> <\/div> <div class="ext-hubs-browse-empty msportalfx-font-semilight" data-bind="visible: isEmptyGrid()"> <div class="ext-hubs-browse-emptyicon msportalfx-svg-disabled" data-bind="image: emptyBrowse.icon"><\/div> <h2 class="ext-hubs-browse-emptytitle" data-bind="text: emptyBrowse.text"><\/h2> <div class="ext-hubs-browse-emptytext"> <span data-bind="text: emptyBrowse.description"><\/span> <!-- ko if: emptyBrowse.links().length === 1 --> <a target="_blank" data-bind="attr: { href: emptyBrowse.links()[0].uri || emptyBrowse.links()[0].Uri }"> <span data-bind="text: emptyBrowse.links()[0].title || emptyBrowse.links()[0].Title"><\/span> <span class="ext-hubs-browse-svg msportalfx-fill" data-bind="image: linkIcon"><\/span> <\/a> <!-- /ko --> <\/div> <div class="ext-hubs-browse-links" data-bind="foreach: emptyBrowse.links(), visible: emptyBrowse.links().length > 1"> <a class="ext-hubs-browse-link" target="_blank" data-bind="attr: { href: $data.uri || $data.Uri }"> <span data-bind="text:$data.title || $data.Title"><\/span> <span class="ext-hubs-browse-svg msportalfx-fill" data-bind="image: $root.linkIcon"><\/span> <\/a> <\/div> <div data-bind="pcControl: createButton()"><\/div> <\/a> <\/div> <\/div> <\/div>'},styleSheets:[{file:"Blades/ResourceGroupMapBlade.css",content:r},{file:"Blades/HubsExtensionBrowseStyles.css",content:u}],isV2:!0},attributes:1,hasOnPinMethod:!0}}))