/**
 * @file Source code generated by PDL compiler.
 * @version 999.999.999.999
 * @sdkversion 5.0.302.1192
 * @schemaversion 1.0.0.2
 */
/// <amd-bundling root="true" popularity="1" />
/// <reference path="../TypeReferences.d.ts" />
define(["require", "exports", "EMA/ClientResources/ClientResources"], function (require, exports, ClientResources) {
    "use strict";
    var ExtensionDefinition;
    (function (ExtensionDefinition) {
        var Internal;
        (function (Internal) {
            var untypedDefinition = {
                "commandsCatalog": [],
                "name": "Microsoft_Azure_EMA",
                "version": "999.999.999.999",
                "hash": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                "schemaVersion": "1.0.0.2",
                "sdkVersion": "5.0.302.1192 (production_sdk#d61f3b5fb7.180626-0205)",
                "commandGroups": [
                    {
                        "name": "CustomConnectorCommands",
                        "commands": [
                            {
                                "name": "CustomConnectorDeleteCommand",
                                "text": ClientResources.Workflow.Commands.deleteCommand,
                                "viewModel": "CustomConnector$CustomConnectorDeleteCommand",
                                "details": {
                                    "blade": "CustomConnectorDeleteBlade",
                                    "selectableBindings": [
                                        {
                                            "property": "id",
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 4,
                                                    "property": "content.id"
                                                }
                                            ]
                                        }
                                    ],
                                    "outputArguments": [
                                        {
                                            "property": "actionBarOutput",
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 1,
                                                    "property": "actionBarOutput"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "assetIdInputProperty": "id",
                                "commandKind": 2,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "CustomConnectorDownloadSwaggerCommand",
                                "text": ClientResources.CustomConnector.Commands.download,
                                "viewModel": "CustomConnector$CustomConnectorDownloadSwaggerCommand",
                                "assetIdInputProperty": "id",
                                "commandKind": 2,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "CustomConnectorEditCommand",
                                "text": ClientResources.CustomConnector.Commands.edit,
                                "viewModel": "CustomConnector$CustomConnectorEditCommand",
                                "details": {
                                    "blade": "CustomConnectorEditBlade",
                                    "selectableBindings": [
                                        {
                                            "property": "id",
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 4,
                                                    "property": "content.id"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "assetIdInputProperty": "id",
                                "commandKind": 2,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "SummaryBladeCommands",
                        "commands": [
                            {
                                "name": "IntegrationAccountUpgradeSkuCommand",
                                "text": ClientResources.IntegrationAccount.UpgradePricingTier.commandText,
                                "viewModel": "IntegrationAccount$IntegrationAccountUpgradeSkuCommandViewModel",
                                "commandKind": 0,
                                "bindings": []
                            },
                            {
                                "name": "DeleteIntegrationAccountCommand",
                                "text": ClientResources.IntegrationAccount.Delete.commandText,
                                "viewModel": "IntegrationAccount$DeleteIntegrationAccountCommandViewModel",
                                "commandKind": 0,
                                "bindings": []
                            }
                        ]
                    },
                    {
                        "name": "IntegrationServiceEnvironmentCommands",
                        "commands": [
                            {
                                "name": "IntegrationServiceEnvironmentDeleteCommand",
                                "text": ClientResources.IntegrationServiceEnvironment.Commands.deleteCommand,
                                "viewModel": "IntegrationServiceEnvironment$IntegrationServiceEnvironmentDeleteCommand",
                                "details": {
                                    "blade": "IntegrationServiceEnvironmentDeleteBlade",
                                    "selectableBindings": [
                                        {
                                            "property": "id",
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 4,
                                                    "property": "content.id"
                                                }
                                            ]
                                        }
                                    ],
                                    "outputArguments": [
                                        {
                                            "property": "actionBarOutput",
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 1,
                                                    "property": "actionBarOutput"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "assetIdInputProperty": "id",
                                "commandKind": 2,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "WorkflowCommands",
                        "commands": [
                            {
                                "name": "ChooseTriggerCommand",
                                "text": ClientResources.Workflow.Commands.chooseTriggerCommand,
                                "viewModel": "Workflow$ChooseTriggerCommandViewModel",
                                "assetType": "Workflow",
                                "assetIdInputProperty": "id",
                                "permissions": [
                                    {
                                        "permissionType": 0,
                                        "assetType": "Workflow",
                                        "assetId": {
                                            "sourceType": 0,
                                            "property": "id"
                                        },
                                        "action": "Microsoft.Logic/workflows/triggers/run/action"
                                    }
                                ],
                                "commandKind": 4,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "RefreshCommand",
                                "text": null,
                                "viewModel": "Workflow$RefreshCommandViewModel",
                                "assetType": "Workflow",
                                "assetIdInputProperty": "id",
                                "permissions": [
                                    {
                                        "permissionType": 0,
                                        "assetType": "Workflow",
                                        "assetId": {
                                            "sourceType": 0,
                                            "property": "id"
                                        },
                                        "action": "Microsoft.Logic/workflows/read"
                                    }
                                ],
                                "commandKind": 0,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "OpenDesignerCommand",
                                "text": ClientResources.Workflow.Commands.openDesignerCommand,
                                "viewModel": "Workflow$OpenDesignerCommandViewModel",
                                "details": {
                                    "invocationInputArguments": [
                                        {
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 4,
                                                    "property": "container.selectable"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "assetType": "Workflow",
                                "assetIdInputProperty": "id",
                                "permissions": [
                                    {
                                        "permissionType": 0,
                                        "assetType": "Workflow",
                                        "assetId": {
                                            "sourceType": 0,
                                            "property": "id"
                                        },
                                        "action": "Microsoft.Logic/workflows/read"
                                    }
                                ],
                                "commandKind": 2,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "OpenWorkflowDeleteBlade",
                                "text": ClientResources.Workflow.Commands.deleteCommand,
                                "viewModel": "Workflow$WorkflowDeleteCommandViewModel",
                                "details": {
                                    "blade": "WorkflowDeleteBlade",
                                    "selectableBindings": [
                                        {
                                            "property": "id",
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 4,
                                                    "property": "content.id"
                                                }
                                            ]
                                        }
                                    ],
                                    "outputArguments": [
                                        {
                                            "property": "actionBarOutput",
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 1,
                                                    "property": "actionBarOutput"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "assetType": "Workflow",
                                "assetIdInputProperty": "id",
                                "permissions": [
                                    {
                                        "permissionType": 0,
                                        "assetType": "Workflow",
                                        "assetId": {
                                            "sourceType": 0,
                                            "property": "id"
                                        },
                                        "action": "Microsoft.Logic/workflows/delete"
                                    }
                                ],
                                "commandKind": 2,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "EnableDisableCommand",
                                "text": null,
                                "viewModel": "Workflow$EnableDisableCommandViewModel",
                                "assetType": "Workflow",
                                "assetIdInputProperty": "id",
                                "permissions": [
                                    {
                                        "permissionType": 0,
                                        "assetType": "Workflow",
                                        "assetId": {
                                            "sourceType": 0,
                                            "property": "id"
                                        },
                                        "action": "Microsoft.Logic/workflows/enable/action"
                                    }
                                ],
                                "commandKind": 0,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "UpdateSchemaCommand",
                                "text": ClientResources.Workflow.Commands.updateSchemaCommand,
                                "viewModel": "Workflow$UpdateSchemaCommandViewModel",
                                "details": {
                                    "invocationInputArguments": [
                                        {
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 4,
                                                    "property": "container.selectable"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "assetType": "Workflow",
                                "assetIdInputProperty": "id",
                                "permissions": [
                                    {
                                        "permissionType": 0,
                                        "assetType": "Workflow",
                                        "assetId": {
                                            "sourceType": 0,
                                            "property": "id"
                                        },
                                        "action": "Microsoft.Logic/workflows/read"
                                    }
                                ],
                                "commandKind": 2,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "CloneWorkflowCommand",
                                "text": ClientResources.Workflow.Commands.cloneWorkflowCommand,
                                "viewModel": "Workflow$CloneWorkflowCommandViewModel",
                                "details": {
                                    "selectablePath": "container.selectable",
                                    "blade": "CreateWorkflowV3Blade",
                                    "parameterCollector": "content.createBladeCollector"
                                },
                                "assetType": "Workflow",
                                "assetIdInputProperty": "id",
                                "permissions": [
                                    {
                                        "permissionType": 0,
                                        "assetType": "Workflow",
                                        "assetId": {
                                            "sourceType": 0,
                                            "property": "id"
                                        },
                                        "action": "Microsoft.Logic/workflows/read"
                                    }
                                ],
                                "commandKind": 2,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "MonitoringCommands",
                        "commands": [
                            {
                                "name": "DiagnosticsSettingsCommand",
                                "text": ClientResources.Workflow.Diagnostics.Settings.commandTitle,
                                "viewModel": "Workflow$DiagnosticsSettingsCommandViewModel",
                                "details": {
                                    "invocationInputArguments": [
                                        {
                                            "valuesFrom": [
                                                {
                                                    "referenceType": 4,
                                                    "property": "container.selectable"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "assetType": "Workflow",
                                "assetIdInputProperty": "id",
                                "commandKind": 2,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "WorkflowRunCommands",
                        "commands": [
                            {
                                "name": "CancelCommand",
                                "text": ClientResources.Workflow.Commands.cancelCommand,
                                "viewModel": "Workflow$CancelCommand",
                                "assetType": "Workflow",
                                "assetIdInputProperty": "id",
                                "permissions": [
                                    {
                                        "permissionType": 0,
                                        "assetType": "Workflow",
                                        "assetId": {
                                            "sourceType": 0,
                                            "property": "id"
                                        },
                                        "action": "Microsoft.Logic/workflows/runs/cancel/action"
                                    }
                                ],
                                "commandKind": 0,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "AccessControlConfigurationBladeCommands",
                        "commands": [
                            {
                                "name": "SaveCommand",
                                "text": ClientResources.Workflow.AccessControlConfigurationBlade.Commands.save,
                                "viewModel": "Workflow$AccessControlConfigurationSaveCommand",
                                "commandKind": 0,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    },
                                    {
                                        "property": "editScopeId",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "editScopeId"
                                            }
                                        ]
                                    },
                                    {
                                        "property": "formValid",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 0,
                                                "property": "content.valid",
                                                "part": "AccessControlConfigurationPart"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "DiscardCommand",
                                "text": ClientResources.Workflow.AccessControlConfigurationBlade.Commands.discard,
                                "viewModel": "Workflow$AccessControlConfigurationDiscardCommand",
                                "commandKind": 0,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    },
                                    {
                                        "property": "editScopeId",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "editScopeId"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "WorkflowSettingsBladeCommands",
                        "commands": [
                            {
                                "name": "SaveCommand",
                                "text": ClientResources.Workflow.WorkflowSettingsBlade.Commands.save,
                                "viewModel": "Workflow$WorkflowSettingsSaveCommand",
                                "commandKind": 0,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    },
                                    {
                                        "property": "editScopeId",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "editScopeId"
                                            }
                                        ]
                                    },
                                    {
                                        "property": "formValid",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 0,
                                                "property": "content.valid",
                                                "part": "WorkflowSettingsPart"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "DiscardCommand",
                                "text": ClientResources.Workflow.WorkflowSettingsBlade.Commands.discard,
                                "viewModel": "Workflow$WorkflowSettingsDiscardCommand",
                                "commandKind": 0,
                                "bindings": [
                                    {
                                        "property": "id",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "id"
                                            }
                                        ]
                                    },
                                    {
                                        "property": "editScopeId",
                                        "valuesFrom": [
                                            {
                                                "referenceType": 1,
                                                "property": "editScopeId"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "htmlTemplates": {}
            };
            Internal.definition = untypedDefinition;
        })(Internal || (Internal = {}));
        ExtensionDefinition.definitionName = "Microsoft_Azure_EMA";
        function getDefinition() {
            if (Internal.definition) {
                var def = Internal.definition;
                Internal.definition = null;
                return def;
            }
            throw new Error("Extension definition is no longer available.");
        }
        ExtensionDefinition.getDefinition = getDefinition;
        var External;
        (function (External) {
            var HubsExtension;
            (function (HubsExtension) {
                HubsExtension.name = "HubsExtension";
                var Blades;
                (function (Blades) {
                    var ResourceGroupMapBlade;
                    (function (ResourceGroupMapBlade) {
                        ResourceGroupMapBlade.name = "ResourceGroupMapBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = ResourceGroupMapBlade.Inputs || (ResourceGroupMapBlade.Inputs = {}));
                    })(ResourceGroupMapBlade = Blades.ResourceGroupMapBlade || (Blades.ResourceGroupMapBlade = {}));
                    var AssignTagsBlade;
                    (function (AssignTagsBlade) {
                        AssignTagsBlade.name = "AssignTagsBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resources = "resources";
                        })(Inputs = AssignTagsBlade.Inputs || (AssignTagsBlade.Inputs = {}));
                    })(AssignTagsBlade = Blades.AssignTagsBlade || (Blades.AssignTagsBlade = {}));
                    var EditTagsBlade;
                    (function (EditTagsBlade) {
                        EditTagsBlade.name = "EditTagsBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resource = "resource";
                        })(Inputs = EditTagsBlade.Inputs || (EditTagsBlade.Inputs = {}));
                    })(EditTagsBlade = Blades.EditTagsBlade || (Blades.EditTagsBlade = {}));
                    var UnauthorizedAssetBlade;
                    (function (UnauthorizedAssetBlade) {
                        UnauthorizedAssetBlade.name = "UnauthorizedAssetBlade";
                    })(UnauthorizedAssetBlade = Blades.UnauthorizedAssetBlade || (Blades.UnauthorizedAssetBlade = {}));
                    var NotFoundAssetBlade;
                    (function (NotFoundAssetBlade) {
                        NotFoundAssetBlade.name = "NotFoundAssetBlade";
                    })(NotFoundAssetBlade = Blades.NotFoundAssetBlade || (Blades.NotFoundAssetBlade = {}));
                    var UnavailableAssetBlade;
                    (function (UnavailableAssetBlade) {
                        UnavailableAssetBlade.name = "UnavailableAssetBlade";
                    })(UnavailableAssetBlade = Blades.UnavailableAssetBlade || (Blades.UnavailableAssetBlade = {}));
                    var Resources;
                    (function (Resources) {
                        Resources.name = "Resources";
                    })(Resources = Blades.Resources || (Blades.Resources = {}));
                    var BrowseAllResourcesBlade;
                    (function (BrowseAllResourcesBlade) {
                        BrowseAllResourcesBlade.name = "BrowseAllResourcesBlade";
                    })(BrowseAllResourcesBlade = Blades.BrowseAllResourcesBlade || (Blades.BrowseAllResourcesBlade = {}));
                    var BrowseAllInMenu;
                    (function (BrowseAllInMenu) {
                        BrowseAllInMenu.name = "BrowseAllInMenu";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resourceType = "resourceType";
                        })(Inputs = BrowseAllInMenu.Inputs || (BrowseAllInMenu.Inputs = {}));
                    })(BrowseAllInMenu = Blades.BrowseAllInMenu || (Blades.BrowseAllInMenu = {}));
                    var BrowseResourceBlade;
                    (function (BrowseResourceBlade) {
                        BrowseResourceBlade.name = "BrowseResourceBlade";
                    })(BrowseResourceBlade = Blades.BrowseResourceBlade || (Blades.BrowseResourceBlade = {}));
                    var BrowseInMenu;
                    (function (BrowseInMenu) {
                        BrowseInMenu.name = "BrowseInMenu";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resourceType = "resourceType";
                        })(Inputs = BrowseInMenu.Inputs || (BrowseInMenu.Inputs = {}));
                    })(BrowseInMenu = Blades.BrowseInMenu || (Blades.BrowseInMenu = {}));
                    var BrowseInstanceLinkBlade;
                    (function (BrowseInstanceLinkBlade) {
                        BrowseInstanceLinkBlade.name = "BrowseInstanceLinkBlade";
                    })(BrowseInstanceLinkBlade = Blades.BrowseInstanceLinkBlade || (Blades.BrowseInstanceLinkBlade = {}));
                    var BrowseResourceGroupBlade;
                    (function (BrowseResourceGroupBlade) {
                        BrowseResourceGroupBlade.name = "BrowseResourceGroupBlade";
                    })(BrowseResourceGroupBlade = Blades.BrowseResourceGroupBlade || (Blades.BrowseResourceGroupBlade = {}));
                    var BrowseGroupsInMenu;
                    (function (BrowseGroupsInMenu) {
                        BrowseGroupsInMenu.name = "BrowseGroupsInMenu";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resourceType = "resourceType";
                        })(Inputs = BrowseGroupsInMenu.Inputs || (BrowseGroupsInMenu.Inputs = {}));
                    })(BrowseGroupsInMenu = Blades.BrowseGroupsInMenu || (Blades.BrowseGroupsInMenu = {}));
                    var MapResourceGroupBlade;
                    (function (MapResourceGroupBlade) {
                        MapResourceGroupBlade.name = "MapResourceGroupBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = MapResourceGroupBlade.Inputs || (MapResourceGroupBlade.Inputs = {}));
                    })(MapResourceGroupBlade = Blades.MapResourceGroupBlade || (Blades.MapResourceGroupBlade = {}));
                    var ResourceProperties;
                    (function (ResourceProperties) {
                        ResourceProperties.name = "ResourceProperties";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = ResourceProperties.Inputs || (ResourceProperties.Inputs = {}));
                    })(ResourceProperties = Blades.ResourceProperties || (Blades.ResourceProperties = {}));
                    var ResourceGroupPickerV3Blade;
                    (function (ResourceGroupPickerV3Blade) {
                        ResourceGroupPickerV3Blade.name = "ResourceGroupPickerV3Blade";
                    })(ResourceGroupPickerV3Blade = Blades.ResourceGroupPickerV3Blade || (Blades.ResourceGroupPickerV3Blade = {}));
                    var DeployToAzure;
                    (function (DeployToAzure) {
                        DeployToAzure.name = "DeployToAzure";
                    })(DeployToAzure = Blades.DeployToAzure || (Blades.DeployToAzure = {}));
                    var DeployFromTemplateBlade;
                    (function (DeployFromTemplateBlade) {
                        DeployFromTemplateBlade.name = "DeployFromTemplateBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.internal_bladeCallerParams = "internal_bladeCallerParams";
                        })(Inputs = DeployFromTemplateBlade.Inputs || (DeployFromTemplateBlade.Inputs = {}));
                    })(DeployFromTemplateBlade = Blades.DeployFromTemplateBlade || (Blades.DeployFromTemplateBlade = {}));
                    var ParametersEditorBlade;
                    (function (ParametersEditorBlade) {
                        ParametersEditorBlade.name = "ParametersEditorBlade";
                    })(ParametersEditorBlade = Blades.ParametersEditorBlade || (Blades.ParametersEditorBlade = {}));
                    var ParametersFileEditorBlade;
                    (function (ParametersFileEditorBlade) {
                        ParametersFileEditorBlade.name = "ParametersFileEditorBlade";
                    })(ParametersFileEditorBlade = Blades.ParametersFileEditorBlade || (Blades.ParametersFileEditorBlade = {}));
                    var TemplateEditorBlade;
                    (function (TemplateEditorBlade) {
                        TemplateEditorBlade.name = "TemplateEditorBlade";
                    })(TemplateEditorBlade = Blades.TemplateEditorBlade || (Blades.TemplateEditorBlade = {}));
                    var LocationPickerV3Blade;
                    (function (LocationPickerV3Blade) {
                        LocationPickerV3Blade.name = "LocationPickerV3Blade";
                    })(LocationPickerV3Blade = Blades.LocationPickerV3Blade || (Blades.LocationPickerV3Blade = {}));
                    var DeploymentInputsBlade;
                    (function (DeploymentInputsBlade) {
                        DeploymentInputsBlade.name = "DeploymentInputsBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = DeploymentInputsBlade.Inputs || (DeploymentInputsBlade.Inputs = {}));
                    })(DeploymentInputsBlade = Blades.DeploymentInputsBlade || (Blades.DeploymentInputsBlade = {}));
                    var DeploymentOutputsBlade;
                    (function (DeploymentOutputsBlade) {
                        DeploymentOutputsBlade.name = "DeploymentOutputsBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = DeploymentOutputsBlade.Inputs || (DeploymentOutputsBlade.Inputs = {}));
                    })(DeploymentOutputsBlade = Blades.DeploymentOutputsBlade || (Blades.DeploymentOutputsBlade = {}));
                    var ResourceMenuBlade;
                    (function (ResourceMenuBlade) {
                        ResourceMenuBlade.name = "ResourceMenuBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = ResourceMenuBlade.Inputs || (ResourceMenuBlade.Inputs = {}));
                    })(ResourceMenuBlade = Blades.ResourceMenuBlade || (Blades.ResourceMenuBlade = {}));
                    var ServicesHealthBlade;
                    (function (ServicesHealthBlade) {
                        ServicesHealthBlade.name = "ServicesHealthBlade";
                    })(ServicesHealthBlade = Blades.ServicesHealthBlade || (Blades.ServicesHealthBlade = {}));
                    var SubscriptionPickerV3Blade;
                    (function (SubscriptionPickerV3Blade) {
                        SubscriptionPickerV3Blade.name = "SubscriptionPickerV3Blade";
                    })(SubscriptionPickerV3Blade = Blades.SubscriptionPickerV3Blade || (Blades.SubscriptionPickerV3Blade = {}));
                })(Blades = HubsExtension.Blades || (HubsExtension.Blades = {}));
            })(HubsExtension = External.HubsExtension || (External.HubsExtension = {}));
            var Microsoft_Azure_AD;
            (function (Microsoft_Azure_AD) {
                Microsoft_Azure_AD.name = "Microsoft_Azure_AD";
            })(Microsoft_Azure_AD = External.Microsoft_Azure_AD || (External.Microsoft_Azure_AD = {}));
            var Microsoft_Azure_Insights;
            (function (Microsoft_Azure_Insights) {
                Microsoft_Azure_Insights.name = "Microsoft_Azure_Insights";
                var Blades;
                (function (Blades) {
                    var AlertAddBlade;
                    (function (AlertAddBlade) {
                        AlertAddBlade.name = "AlertAddBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.collectorBindingInternals_inputs = "collectorBindingInternals-inputs";
                            Inputs.collectorBindingInternals_errors = "collectorBindingInternals-errors";
                            Inputs.stepInput = "stepInput";
                        })(Inputs = AlertAddBlade.Inputs || (AlertAddBlade.Inputs = {}));
                        var Outputs;
                        (function (Outputs) {
                            Outputs.collectorBindingInternals_outputs = "collectorBindingInternals-outputs";
                            Outputs.collectorBindingInternals_commit = "collectorBindingInternals-commit";
                            Outputs.stepOutput = "stepOutput";
                        })(Outputs = AlertAddBlade.Outputs || (AlertAddBlade.Outputs = {}));
                    })(AlertAddBlade = Blades.AlertAddBlade || (Blades.AlertAddBlade = {}));
                    var DiagnosticsConfigurationBlade;
                    (function (DiagnosticsConfigurationBlade) {
                        DiagnosticsConfigurationBlade.name = "DiagnosticsConfigurationBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.collectorBindingInternals_inputs = "collectorBindingInternals-inputs";
                            Inputs.collectorBindingInternals_errors = "collectorBindingInternals-errors";
                            Inputs.stepInput = "stepInput";
                        })(Inputs = DiagnosticsConfigurationBlade.Inputs || (DiagnosticsConfigurationBlade.Inputs = {}));
                        var Outputs;
                        (function (Outputs) {
                            Outputs.collectorBindingInternals_outputs = "collectorBindingInternals-outputs";
                            Outputs.collectorBindingInternals_commit = "collectorBindingInternals-commit";
                            Outputs.stepOutput = "stepOutput";
                        })(Outputs = DiagnosticsConfigurationBlade.Outputs || (DiagnosticsConfigurationBlade.Outputs = {}));
                    })(DiagnosticsConfigurationBlade = Blades.DiagnosticsConfigurationBlade || (Blades.DiagnosticsConfigurationBlade = {}));
                    var DiagnosticsConfigurationV2Blade;
                    (function (DiagnosticsConfigurationV2Blade) {
                        DiagnosticsConfigurationV2Blade.name = "DiagnosticsConfigurationV2Blade";
                    })(DiagnosticsConfigurationV2Blade = Blades.DiagnosticsConfigurationV2Blade || (Blades.DiagnosticsConfigurationV2Blade = {}));
                })(Blades = Microsoft_Azure_Insights.Blades || (Microsoft_Azure_Insights.Blades = {}));
            })(Microsoft_Azure_Insights = External.Microsoft_Azure_Insights || (External.Microsoft_Azure_Insights = {}));
            var Microsoft_Azure_Monitoring;
            (function (Microsoft_Azure_Monitoring) {
                Microsoft_Azure_Monitoring.name = "Microsoft_Azure_Monitoring";
                var Blades;
                (function (Blades) {
                    var EventsBrowseBlade;
                    (function (EventsBrowseBlade) {
                        EventsBrowseBlade.name = "EventsBrowseBlade";
                    })(EventsBrowseBlade = Blades.EventsBrowseBlade || (Blades.EventsBrowseBlade = {}));
                    var DiagnosticsLogsBlade;
                    (function (DiagnosticsLogsBlade) {
                        DiagnosticsLogsBlade.name = "DiagnosticsLogsBlade";
                    })(DiagnosticsLogsBlade = Blades.DiagnosticsLogsBlade || (Blades.DiagnosticsLogsBlade = {}));
                    var OverviewBlade;
                    (function (OverviewBlade) {
                        OverviewBlade.name = "OverviewBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.queryInputs = "queryInputs";
                        })(Inputs = OverviewBlade.Inputs || (OverviewBlade.Inputs = {}));
                    })(OverviewBlade = Blades.OverviewBlade || (Blades.OverviewBlade = {}));
                    var AlertsBlade;
                    (function (AlertsBlade) {
                        AlertsBlade.name = "AlertsBlade";
                    })(AlertsBlade = Blades.AlertsBlade || (Blades.AlertsBlade = {}));
                    var ServiceNotificationsBlade;
                    (function (ServiceNotificationsBlade) {
                        ServiceNotificationsBlade.name = "ServiceNotificationsBlade";
                    })(ServiceNotificationsBlade = Blades.ServiceNotificationsBlade || (Blades.ServiceNotificationsBlade = {}));
                    var NotificationGroupsBlade;
                    (function (NotificationGroupsBlade) {
                        NotificationGroupsBlade.name = "NotificationGroupsBlade";
                    })(NotificationGroupsBlade = Blades.NotificationGroupsBlade || (Blades.NotificationGroupsBlade = {}));
                    var NotificationReceiversDetailBlade;
                    (function (NotificationReceiversDetailBlade) {
                        NotificationReceiversDetailBlade.name = "NotificationReceiversDetailBlade";
                    })(NotificationReceiversDetailBlade = Blades.NotificationReceiversDetailBlade || (Blades.NotificationReceiversDetailBlade = {}));
                    var OmsSolutionsBlade;
                    (function (OmsSolutionsBlade) {
                        OmsSolutionsBlade.name = "OmsSolutionsBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.queryInputs = "queryInputs";
                        })(Inputs = OmsSolutionsBlade.Inputs || (OmsSolutionsBlade.Inputs = {}));
                    })(OmsSolutionsBlade = Blades.OmsSolutionsBlade || (Blades.OmsSolutionsBlade = {}));
                    var ApplicationInsightsBlade;
                    (function (ApplicationInsightsBlade) {
                        ApplicationInsightsBlade.name = "ApplicationInsightsBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.queryInputs = "queryInputs";
                        })(Inputs = ApplicationInsightsBlade.Inputs || (ApplicationInsightsBlade.Inputs = {}));
                    })(ApplicationInsightsBlade = Blades.ApplicationInsightsBlade || (Blades.ApplicationInsightsBlade = {}));
                    var ServiceDiagnosticsSettingsUpdateBlade;
                    (function (ServiceDiagnosticsSettingsUpdateBlade) {
                        ServiceDiagnosticsSettingsUpdateBlade.name = "ServiceDiagnosticsSettingsUpdateBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.diagnosticsSettingsInputs = "diagnosticsSettingsInputs";
                        })(Inputs = ServiceDiagnosticsSettingsUpdateBlade.Inputs || (ServiceDiagnosticsSettingsUpdateBlade.Inputs = {}));
                    })(ServiceDiagnosticsSettingsUpdateBlade = Blades.ServiceDiagnosticsSettingsUpdateBlade || (Blades.ServiceDiagnosticsSettingsUpdateBlade = {}));
                    var CreateRuleBlade;
                    (function (CreateRuleBlade) {
                        CreateRuleBlade.name = "CreateRuleBlade";
                    })(CreateRuleBlade = Blades.CreateRuleBlade || (Blades.CreateRuleBlade = {}));
                    var UpdateRuleBlade;
                    (function (UpdateRuleBlade) {
                        UpdateRuleBlade.name = "UpdateRuleBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.ruleInputs = "ruleInputs";
                        })(Inputs = UpdateRuleBlade.Inputs || (UpdateRuleBlade.Inputs = {}));
                    })(UpdateRuleBlade = Blades.UpdateRuleBlade || (Blades.UpdateRuleBlade = {}));
                    var CreateServiceNotificationRuleBlade;
                    (function (CreateServiceNotificationRuleBlade) {
                        CreateServiceNotificationRuleBlade.name = "CreateServiceNotificationRuleBlade";
                    })(CreateServiceNotificationRuleBlade = Blades.CreateServiceNotificationRuleBlade || (Blades.CreateServiceNotificationRuleBlade = {}));
                    var UpdateServiceNotificationRuleBlade;
                    (function (UpdateServiceNotificationRuleBlade) {
                        UpdateServiceNotificationRuleBlade.name = "UpdateServiceNotificationRuleBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.ruleInputs = "ruleInputs";
                        })(Inputs = UpdateServiceNotificationRuleBlade.Inputs || (UpdateServiceNotificationRuleBlade.Inputs = {}));
                    })(UpdateServiceNotificationRuleBlade = Blades.UpdateServiceNotificationRuleBlade || (Blades.UpdateServiceNotificationRuleBlade = {}));
                    var EventHubAuthorizationRuleSelectorBlade;
                    (function (EventHubAuthorizationRuleSelectorBlade) {
                        EventHubAuthorizationRuleSelectorBlade.name = "EventHubAuthorizationRuleSelectorBlade";
                    })(EventHubAuthorizationRuleSelectorBlade = Blades.EventHubAuthorizationRuleSelectorBlade || (Blades.EventHubAuthorizationRuleSelectorBlade = {}));
                })(Blades = Microsoft_Azure_Monitoring.Blades || (Microsoft_Azure_Monitoring.Blades = {}));
            })(Microsoft_Azure_Monitoring = External.Microsoft_Azure_Monitoring || (External.Microsoft_Azure_Monitoring = {}));
            var WebsitesExtension;
            (function (WebsitesExtension) {
                WebsitesExtension.name = "WebsitesExtension";
                var Blades;
                (function (Blades) {
                    var ApiHubConnectionBlade;
                    (function (ApiHubConnectionBlade) {
                        ApiHubConnectionBlade.name = "ApiHubConnectionBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = ApiHubConnectionBlade.Inputs || (ApiHubConnectionBlade.Inputs = {}));
                    })(ApiHubConnectionBlade = Blades.ApiHubConnectionBlade || (Blades.ApiHubConnectionBlade = {}));
                    var SslSpecPickerV3;
                    (function (SslSpecPickerV3) {
                        SslSpecPickerV3.name = "SslSpecPickerV3";
                    })(SslSpecPickerV3 = Blades.SslSpecPickerV3 || (Blades.SslSpecPickerV3 = {}));
                    var UpgradeAsp;
                    (function (UpgradeAsp) {
                        UpgradeAsp.name = "UpgradeAsp";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resourceUri = "resourceUri";
                            Inputs.selectSpecId = "selectSpecId";
                            Inputs.maxDisableSpecId = "maxDisableSpecId";
                            Inputs.displayMessage = "displayMessage";
                            Inputs.buttonName = "buttonName";
                        })(Inputs = UpgradeAsp.Inputs || (UpgradeAsp.Inputs = {}));
                    })(UpgradeAsp = Blades.UpgradeAsp || (Blades.UpgradeAsp = {}));
                    var FunctionsIFrameBlade;
                    (function (FunctionsIFrameBlade) {
                        FunctionsIFrameBlade.name = "FunctionsIFrameBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = FunctionsIFrameBlade.Inputs || (FunctionsIFrameBlade.Inputs = {}));
                    })(FunctionsIFrameBlade = Blades.FunctionsIFrameBlade || (Blades.FunctionsIFrameBlade = {}));
                    var WebsitePickerV3;
                    (function (WebsitePickerV3) {
                        WebsitePickerV3.name = "WebsitePickerV3";
                    })(WebsitePickerV3 = Blades.WebsitePickerV3 || (Blades.WebsitePickerV3 = {}));
                    var ExistingWebsitesPickerBlade;
                    (function (ExistingWebsitesPickerBlade) {
                        ExistingWebsitesPickerBlade.name = "ExistingWebsitesPickerBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.collectorBindingInternals_inputs = "collectorBindingInternals-inputs";
                            Inputs.collectorBindingInternals_errors = "collectorBindingInternals-errors";
                            Inputs.stepInput = "stepInput";
                        })(Inputs = ExistingWebsitesPickerBlade.Inputs || (ExistingWebsitesPickerBlade.Inputs = {}));
                        var Outputs;
                        (function (Outputs) {
                            Outputs.collectorBindingInternals_outputs = "collectorBindingInternals-outputs";
                            Outputs.collectorBindingInternals_commit = "collectorBindingInternals-commit";
                            Outputs.stepOutput = "stepOutput";
                        })(Outputs = ExistingWebsitesPickerBlade.Outputs || (ExistingWebsitesPickerBlade.Outputs = {}));
                    })(ExistingWebsitesPickerBlade = Blades.ExistingWebsitesPickerBlade || (Blades.ExistingWebsitesPickerBlade = {}));
                    var CreateConnectionBlade;
                    (function (CreateConnectionBlade) {
                        CreateConnectionBlade.name = "CreateConnectionBlade";
                    })(CreateConnectionBlade = Blades.CreateConnectionBlade || (Blades.CreateConnectionBlade = {}));
                    var ConnectionBlade;
                    (function (ConnectionBlade) {
                        ConnectionBlade.name = "ConnectionBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = ConnectionBlade.Inputs || (ConnectionBlade.Inputs = {}));
                    })(ConnectionBlade = Blades.ConnectionBlade || (Blades.ConnectionBlade = {}));
                    var CreateAseBlade;
                    (function (CreateAseBlade) {
                        CreateAseBlade.name = "CreateAseBlade";
                    })(CreateAseBlade = Blades.CreateAseBlade || (Blades.CreateAseBlade = {}));
                    var VNETSelectionBlade;
                    (function (VNETSelectionBlade) {
                        VNETSelectionBlade.name = "VNETSelectionBlade";
                    })(VNETSelectionBlade = Blades.VNETSelectionBlade || (Blades.VNETSelectionBlade = {}));
                    var VNETCreateBlade;
                    (function (VNETCreateBlade) {
                        VNETCreateBlade.name = "VNETCreateBlade";
                    })(VNETCreateBlade = Blades.VNETCreateBlade || (Blades.VNETCreateBlade = {}));
                    var SubnetCreateBlade;
                    (function (SubnetCreateBlade) {
                        SubnetCreateBlade.name = "SubnetCreateBlade";
                    })(SubnetCreateBlade = Blades.SubnetCreateBlade || (Blades.SubnetCreateBlade = {}));
                    var ScaleFormBlade;
                    (function (ScaleFormBlade) {
                        ScaleFormBlade.name = "ScaleFormBlade";
                    })(ScaleFormBlade = Blades.ScaleFormBlade || (Blades.ScaleFormBlade = {}));
                    var VNETPicker;
                    (function (VNETPicker) {
                        VNETPicker.name = "VNETPicker";
                    })(VNETPicker = Blades.VNETPicker || (Blades.VNETPicker = {}));
                    var WebHostingPlanBlade;
                    (function (WebHostingPlanBlade) {
                        WebHostingPlanBlade.name = "WebHostingPlanBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = WebHostingPlanBlade.Inputs || (WebHostingPlanBlade.Inputs = {}));
                    })(WebHostingPlanBlade = Blades.WebHostingPlanBlade || (Blades.WebHostingPlanBlade = {}));
                    var SubnetPicker;
                    (function (SubnetPicker) {
                        SubnetPicker.name = "SubnetPicker";
                    })(SubnetPicker = Blades.SubnetPicker || (Blades.SubnetPicker = {}));
                    var AppHubBrowseAppsBlade;
                    (function (AppHubBrowseAppsBlade) {
                        AppHubBrowseAppsBlade.name = "AppHubBrowseAppsBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resourceUri = "resourceUri";
                        })(Inputs = AppHubBrowseAppsBlade.Inputs || (AppHubBrowseAppsBlade.Inputs = {}));
                    })(AppHubBrowseAppsBlade = Blades.AppHubBrowseAppsBlade || (Blades.AppHubBrowseAppsBlade = {}));
                    var AppHubBrowseAppsBlade2;
                    (function (AppHubBrowseAppsBlade2) {
                        AppHubBrowseAppsBlade2.name = "AppHubBrowseAppsBlade2";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resourceUri = "resourceUri";
                            Inputs.kind = "kind";
                        })(Inputs = AppHubBrowseAppsBlade2.Inputs || (AppHubBrowseAppsBlade2.Inputs = {}));
                    })(AppHubBrowseAppsBlade2 = Blades.AppHubBrowseAppsBlade2 || (Blades.AppHubBrowseAppsBlade2 = {}));
                    var RecommendationsBlade;
                    (function (RecommendationsBlade) {
                        RecommendationsBlade.name = "RecommendationsBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resourceUri = "resourceUri";
                            Inputs.ruleName = "ruleName";
                            Inputs.source = "source";
                        })(Inputs = RecommendationsBlade.Inputs || (RecommendationsBlade.Inputs = {}));
                    })(RecommendationsBlade = Blades.RecommendationsBlade || (Blades.RecommendationsBlade = {}));
                    var ConnectionProviderBlade;
                    (function (ConnectionProviderBlade) {
                        ConnectionProviderBlade.name = "ConnectionProviderBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = ConnectionProviderBlade.Inputs || (ConnectionProviderBlade.Inputs = {}));
                    })(ConnectionProviderBlade = Blades.ConnectionProviderBlade || (Blades.ConnectionProviderBlade = {}));
                    var CreateBlade;
                    (function (CreateBlade) {
                        CreateBlade.name = "CreateBlade";
                    })(CreateBlade = Blades.CreateBlade || (Blades.CreateBlade = {}));
                    var CreateLinuxBlade;
                    (function (CreateLinuxBlade) {
                        CreateLinuxBlade.name = "CreateLinuxBlade";
                    })(CreateLinuxBlade = Blades.CreateLinuxBlade || (Blades.CreateLinuxBlade = {}));
                    var CloneSettings;
                    (function (CloneSettings) {
                        CloneSettings.name = "CloneSettings";
                    })(CloneSettings = Blades.CloneSettings || (Blades.CloneSettings = {}));
                    var AppServicePlanPickerBladeV3;
                    (function (AppServicePlanPickerBladeV3) {
                        AppServicePlanPickerBladeV3.name = "AppServicePlanPickerBladeV3";
                    })(AppServicePlanPickerBladeV3 = Blades.AppServicePlanPickerBladeV3 || (Blades.AppServicePlanPickerBladeV3 = {}));
                    var StorageAccountPickerBlade;
                    (function (StorageAccountPickerBlade) {
                        StorageAccountPickerBlade.name = "StorageAccountPickerBlade";
                    })(StorageAccountPickerBlade = Blades.StorageAccountPickerBlade || (Blades.StorageAccountPickerBlade = {}));
                    var StorageAccountCreator;
                    (function (StorageAccountCreator) {
                        StorageAccountCreator.name = "StorageAccountCreator";
                    })(StorageAccountCreator = Blades.StorageAccountCreator || (Blades.StorageAccountCreator = {}));
                    var CreateASPBlade;
                    (function (CreateASPBlade) {
                        CreateASPBlade.name = "CreateASPBlade";
                    })(CreateASPBlade = Blades.CreateASPBlade || (Blades.CreateASPBlade = {}));
                    var WebAppSettingsBlade;
                    (function (WebAppSettingsBlade) {
                        WebAppSettingsBlade.name = "WebAppSettingsBlade";
                    })(WebAppSettingsBlade = Blades.WebAppSettingsBlade || (Blades.WebAppSettingsBlade = {}));
                    var ConnectionProvidersListBlade;
                    (function (ConnectionProvidersListBlade) {
                        ConnectionProvidersListBlade.name = "ConnectionProvidersListBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = ConnectionProvidersListBlade.Inputs || (ConnectionProvidersListBlade.Inputs = {}));
                    })(ConnectionProvidersListBlade = Blades.ConnectionProvidersListBlade || (Blades.ConnectionProvidersListBlade = {}));
                    var AppHubBlade;
                    (function (AppHubBlade) {
                        AppHubBlade.name = "AppHubBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.id = "id";
                        })(Inputs = AppHubBlade.Inputs || (AppHubBlade.Inputs = {}));
                    })(AppHubBlade = Blades.AppHubBlade || (Blades.AppHubBlade = {}));
                    var AddVirtualNetworkBlade;
                    (function (AddVirtualNetworkBlade) {
                        AddVirtualNetworkBlade.name = "AddVirtualNetworkBlade";
                    })(AddVirtualNetworkBlade = Blades.AddVirtualNetworkBlade || (Blades.AddVirtualNetworkBlade = {}));
                    var VirtualNetworkPicker;
                    (function (VirtualNetworkPicker) {
                        VirtualNetworkPicker.name = "VirtualNetworkPicker";
                    })(VirtualNetworkPicker = Blades.VirtualNetworkPicker || (Blades.VirtualNetworkPicker = {}));
                    var LogStreamBlade;
                    (function (LogStreamBlade) {
                        LogStreamBlade.name = "LogStreamBlade";
                        var Inputs;
                        (function (Inputs) {
                            Inputs.resourceUri = "resourceUri";
                        })(Inputs = LogStreamBlade.Inputs || (LogStreamBlade.Inputs = {}));
                    })(LogStreamBlade = Blades.LogStreamBlade || (Blades.LogStreamBlade = {}));
                    var WebsiteSpecPickerV3;
                    (function (WebsiteSpecPickerV3) {
                        WebsiteSpecPickerV3.name = "WebsiteSpecPickerV3";
                    })(WebsiteSpecPickerV3 = Blades.WebsiteSpecPickerV3 || (Blades.WebsiteSpecPickerV3 = {}));
                    var WorkerPoolPickerBladeV3;
                    (function (WorkerPoolPickerBladeV3) {
                        WorkerPoolPickerBladeV3.name = "WorkerPoolPickerBladeV3";
                    })(WorkerPoolPickerBladeV3 = Blades.WorkerPoolPickerBladeV3 || (Blades.WorkerPoolPickerBladeV3 = {}));
                    var ASESpecPickerV3;
                    (function (ASESpecPickerV3) {
                        ASESpecPickerV3.name = "ASESpecPickerV3";
                    })(ASESpecPickerV3 = Blades.ASESpecPickerV3 || (Blades.ASESpecPickerV3 = {}));
                    var ASEV2SpecPickerV3;
                    (function (ASEV2SpecPickerV3) {
                        ASEV2SpecPickerV3.name = "ASEV2SpecPickerV3";
                    })(ASEV2SpecPickerV3 = Blades.ASEV2SpecPickerV3 || (Blades.ASEV2SpecPickerV3 = {}));
                    var AppCreateBlade;
                    (function (AppCreateBlade) {
                        AppCreateBlade.name = "AppCreateBlade";
                    })(AppCreateBlade = Blades.AppCreateBlade || (Blades.AppCreateBlade = {}));
                })(Blades = WebsitesExtension.Blades || (WebsitesExtension.Blades = {}));
            })(WebsitesExtension = External.WebsitesExtension || (External.WebsitesExtension = {}));
        })(External = ExtensionDefinition.External || (ExtensionDefinition.External = {}));
        var AssetTypes;
        (function (AssetTypes) {
            var CustomConnector;
            (function (CustomConnector) {
                CustomConnector.name = "CustomConnector";
                var Permissions;
                (function (Permissions) {
                    Permissions.customConnectorDeletePermission = "Microsoft.Web/customApis/delete";
                })(Permissions = CustomConnector.Permissions || (CustomConnector.Permissions = {}));
            })(CustomConnector = AssetTypes.CustomConnector || (AssetTypes.CustomConnector = {}));
            var IntegrationAccount;
            (function (IntegrationAccount) {
                IntegrationAccount.name = "IntegrationAccount";
            })(IntegrationAccount = AssetTypes.IntegrationAccount || (AssetTypes.IntegrationAccount = {}));
            var IntegrationServiceEnvironment;
            (function (IntegrationServiceEnvironment) {
                IntegrationServiceEnvironment.name = "IntegrationServiceEnvironment";
                var Permissions;
                (function (Permissions) {
                    Permissions.integrationServiceEnvironmentDeletePermission = "Microsoft.Logic/integrationServiceEnvironments/delete";
                })(Permissions = IntegrationServiceEnvironment.Permissions || (IntegrationServiceEnvironment.Permissions = {}));
            })(IntegrationServiceEnvironment = AssetTypes.IntegrationServiceEnvironment || (AssetTypes.IntegrationServiceEnvironment = {}));
            var Workflow;
            (function (Workflow) {
                Workflow.name = "Workflow";
                var Permissions;
                (function (Permissions) {
                    Permissions.workflowReadPermission = "Microsoft.Logic/workflows/read";
                    Permissions.workflowWritePermission = "Microsoft.Logic/workflows/write";
                    Permissions.workflowEnableActionPermission = "Microsoft.Logic/workflows/enable/action";
                    Permissions.workflowDisableActionPermission = "Microsoft.Logic/workflows/disable/action";
                    Permissions.workflowTriggerRunActionPermission = "Microsoft.Logic/workflows/triggers/run/action";
                    Permissions.workflowRunCancelActionPermission = "Microsoft.Logic/workflows/runs/cancel/action";
                    Permissions.workflowDeletePermission = "Microsoft.Logic/workflows/delete";
                })(Permissions = Workflow.Permissions || (Workflow.Permissions = {}));
            })(Workflow = AssetTypes.Workflow || (AssetTypes.Workflow = {}));
        })(AssetTypes = ExtensionDefinition.AssetTypes || (ExtensionDefinition.AssetTypes = {}));
        var AssetTypeNames;
        (function (AssetTypeNames) {
            AssetTypeNames.customConnector = AssetTypes.CustomConnector.name;
            AssetTypeNames.integrationAccount = AssetTypes.IntegrationAccount.name;
            AssetTypeNames.integrationServiceEnvironment = AssetTypes.IntegrationServiceEnvironment.name;
            AssetTypeNames.workflow = AssetTypes.Workflow.name;
        })(AssetTypeNames = ExtensionDefinition.AssetTypeNames || (ExtensionDefinition.AssetTypeNames = {}));
        var BladeNames;
        (function (BladeNames) {
            BladeNames.createCustomConnectorBlade = "CreateCustomConnectorBlade";
            BladeNames.customConnectorBlade = "CustomConnectorBlade";
            BladeNames.customConnectorDeleteBlade = "CustomConnectorDeleteBlade";
            BladeNames.customConnectorEditBlade = "CustomConnectorEditBlade";
            BladeNames.integrationAccountCreateBlade = "IntegrationAccountCreateBlade";
            BladeNames.integrationAccountAddAgreementBlade = "IntegrationAccountAddAgreementBlade";
            BladeNames.integrationAccountAddAS2AgreementReceiveSettingsBlade = "IntegrationAccountAddAS2AgreementReceiveSettingsBlade";
            BladeNames.integrationAccountAddAS2AgreementSendSettingsBlade = "IntegrationAccountAddAS2AgreementSendSettingsBlade";
            BladeNames.integrationAccountAddEDIFACTAgreementReceiveSettingsBlade = "IntegrationAccountAddEDIFACTAgreementReceiveSettingsBlade";
            BladeNames.integrationAccountAddEDIFACTAgreementSendSettingsBlade = "IntegrationAccountAddEDIFACTAgreementSendSettingsBlade";
            BladeNames.integrationAccountAddMapBlade = "IntegrationAccountAddMapBlade";
            BladeNames.integrationAccountAddOrUpdateAssemblyBlade = "IntegrationAccountAddOrUpdateAssemblyBlade";
            BladeNames.integrationAccountAddOrUpdateBatchConfigurationBlade = "IntegrationAccountAddOrUpdateBatchConfigurationBlade";
            BladeNames.integrationAccountAddOrUpdateCertificateBlade = "IntegrationAccountAddOrUpdateCertificateBlade";
            BladeNames.integrationAccountAddOrUpdateSchemaBlade = "IntegrationAccountAddOrUpdateSchemaBlade";
            BladeNames.integrationAccountAddPartnerBlade = "IntegrationAccountAddPartnerBlade";
            BladeNames.integrationAccountAddX12AgreementReceiveSettingsBlade = "IntegrationAccountAddX12AgreementReceiveSettingsBlade";
            BladeNames.integrationAccountAddX12AgreementSendSettingsBlade = "IntegrationAccountAddX12AgreementSendSettingsBlade";
            BladeNames.integrationAccountAgreementListBlade = "IntegrationAccountAgreementListBlade";
            BladeNames.integrationAccountAssemblyListBlade = "IntegrationAccountAssemblyListBlade";
            BladeNames.integrationAccountAssemblyPropertiesBlade = "IntegrationAccountAssemblyPropertiesBlade";
            BladeNames.integrationAccountBatchConfigurationListBlade = "IntegrationAccountBatchConfigurationListBlade";
            BladeNames.integrationAccountBlade = "IntegrationAccountBlade";
            BladeNames.integrationAccountCallbackUrlBlade = "IntegrationAccountCallbackUrlBlade";
            BladeNames.integrationAccountCertificateListBlade = "IntegrationAccountCertificateListBlade";
            BladeNames.integrationAccountCertificatePropertiesBlade = "IntegrationAccountCertificatePropertiesBlade";
            BladeNames.integrationAccountEditArtifactAsJsonBlade = "IntegrationAccountEditArtifactAsJsonBlade";
            BladeNames.integrationAccountMapListBlade = "IntegrationAccountMapListBlade";
            BladeNames.integrationAccountMapPropertiesBlade = "IntegrationAccountMapPropertiesBlade";
            BladeNames.integrationAccountPartnerListBlade = "IntegrationAccountPartnerListBlade";
            BladeNames.integrationAccountPartnerUpdateBlade = "IntegrationAccountPartnerUpdateBlade";
            BladeNames.integrationAccountPropertiesBlade = "IntegrationAccountPropertiesBlade";
            BladeNames.integrationAccountSchemaListBlade = "IntegrationAccountSchemaListBlade";
            BladeNames.integrationAccountSchemaPropertiesBlade = "IntegrationAccountSchemaPropertiesBlade";
            BladeNames.createIntegrationServiceEnvironmentBlade = "CreateIntegrationServiceEnvironmentBlade";
            BladeNames.integrationServiceEnvironmentBlade = "IntegrationServiceEnvironmentBlade";
            BladeNames.integrationServiceEnvironmentDeleteBlade = "IntegrationServiceEnvironmentDeleteBlade";
            BladeNames.integrationServiceEnvironmentPropertiesBlade = "IntegrationServiceEnvironmentPropertiesBlade";
            BladeNames.accessControlConfigurationBlade = "AccessControlConfigurationBlade";
            BladeNames.accessKeysBlade = "AccessKeysBlade";
            BladeNames.apiConnectionsBlade = "ApiConnectionsBlade";
            BladeNames.createWorkflowV3Blade = "CreateWorkflowV3Blade";
            BladeNames.exportWorkflowToPowerAppsBlade = "ExportWorkflowToPowerAppsBlade";
            BladeNames.integrationAccountPickerBlade = "IntegrationAccountPickerBlade";
            BladeNames.logicAppsDesignerBlade = "LogicAppsDesignerBlade";
            BladeNames.logicAppsMonitorBlade = "LogicAppsMonitorBlade";
            BladeNames.logicAppsPromoteBlade = "LogicAppsPromoteBlade";
            BladeNames.logicAppsReleaseNotesBlade = "LogicAppsReleaseNotesBlade";
            BladeNames.logicAppsV2UpdateBlade = "LogicAppsV2UpdateBlade";
            BladeNames.logicAppsV3UpdateBlade = "LogicAppsV3UpdateBlade";
            BladeNames.logicAppsVersionsBlade = "LogicAppsVersionsBlade";
            BladeNames.workflowActionBlade = "WorkflowActionBlade";
            BladeNames.displayInputs = "DisplayInputs";
            BladeNames.displayOutputs = "DisplayOutputs";
            BladeNames.displayInputData = "DisplayInputData";
            BladeNames.displayOutputData = "DisplayOutputData";
            BladeNames.workflowAllRunsBlade = "WorkflowAllRunsBlade";
            BladeNames.workflowAllTriggersBlade = "WorkflowAllTriggersBlade";
            BladeNames.workflowBlade = "WorkflowBlade";
            BladeNames.workflowResourceBlade = "WorkflowResourceBlade";
            BladeNames.workflowDeleteBlade = "WorkflowDeleteBlade";
            BladeNames.workflowMonitoringBlade = "WorkflowMonitoringBlade";
            BladeNames.workflowPropertiesBlade = "WorkflowPropertiesBlade";
            BladeNames.workflowQuickStartBlade = "WorkflowQuickStartBlade";
            BladeNames.workflowRunBlade = "WorkflowRunBlade";
            BladeNames.workflowSettingsBlade = "WorkflowSettingsBlade";
            BladeNames.workflowTriggerBlade = "WorkflowTriggerBlade";
            BladeNames.workflowTriggerHistoriesBlade = "WorkflowTriggerHistoriesBlade";
            BladeNames.workflowTriggerHistoryBlade = "WorkflowTriggerHistoryBlade";
        })(BladeNames = ExtensionDefinition.BladeNames || (ExtensionDefinition.BladeNames = {}));
        var CommandGroupNames;
        (function (CommandGroupNames) {
            CommandGroupNames.customConnectorCommands = "CustomConnectorCommands";
            CommandGroupNames.summaryBladeCommands = "SummaryBladeCommands";
            CommandGroupNames.integrationServiceEnvironmentCommands = "IntegrationServiceEnvironmentCommands";
            CommandGroupNames.workflowCommands = "WorkflowCommands";
            CommandGroupNames.monitoringCommands = "MonitoringCommands";
            CommandGroupNames.workflowRunCommands = "WorkflowRunCommands";
        })(CommandGroupNames = ExtensionDefinition.CommandGroupNames || (ExtensionDefinition.CommandGroupNames = {}));
        var NotificationDefinitions;
        (function (NotificationDefinitions) {
            var DeleteCustomConnector;
            (function (DeleteCustomConnector) {
                DeleteCustomConnector.name = "DeleteCustomConnector";
                DeleteCustomConnector.inProgress = { status: "inProgress" };
                DeleteCustomConnector.success = { status: "success" };
                DeleteCustomConnector.error = { status: "error" };
            })(DeleteCustomConnector = NotificationDefinitions.DeleteCustomConnector || (NotificationDefinitions.DeleteCustomConnector = {}));
            var DeleteIntegrationServiceEnvironment;
            (function (DeleteIntegrationServiceEnvironment) {
                DeleteIntegrationServiceEnvironment.name = "DeleteIntegrationServiceEnvironment";
                DeleteIntegrationServiceEnvironment.inProgress = { status: "inProgress" };
                DeleteIntegrationServiceEnvironment.success = { status: "success" };
                DeleteIntegrationServiceEnvironment.error = { status: "error" };
            })(DeleteIntegrationServiceEnvironment = NotificationDefinitions.DeleteIntegrationServiceEnvironment || (NotificationDefinitions.DeleteIntegrationServiceEnvironment = {}));
            var SaveWorkflow;
            (function (SaveWorkflow) {
                SaveWorkflow.name = "SaveWorkflow";
                SaveWorkflow.inProgress = { status: "inProgress" };
                SaveWorkflow.success = { status: "success" };
                SaveWorkflow.error = { status: "error" };
            })(SaveWorkflow = NotificationDefinitions.SaveWorkflow || (NotificationDefinitions.SaveWorkflow = {}));
            var DeleteWorkflow;
            (function (DeleteWorkflow) {
                DeleteWorkflow.name = "DeleteWorkflow";
                DeleteWorkflow.inProgress = { status: "inProgress" };
                DeleteWorkflow.success = { status: "success" };
                DeleteWorkflow.error = { status: "error" };
            })(DeleteWorkflow = NotificationDefinitions.DeleteWorkflow || (NotificationDefinitions.DeleteWorkflow = {}));
            var RunWorkflow;
            (function (RunWorkflow) {
                RunWorkflow.name = "RunWorkflow";
                RunWorkflow.inProgress = { status: "inProgress" };
                RunWorkflow.success = { status: "success" };
                RunWorkflow.error = { status: "error" };
            })(RunWorkflow = NotificationDefinitions.RunWorkflow || (NotificationDefinitions.RunWorkflow = {}));
            var EnableWorkflow;
            (function (EnableWorkflow) {
                EnableWorkflow.name = "EnableWorkflow";
                EnableWorkflow.inProgress = { status: "inProgress" };
                EnableWorkflow.success = { status: "success" };
                EnableWorkflow.error = { status: "error" };
            })(EnableWorkflow = NotificationDefinitions.EnableWorkflow || (NotificationDefinitions.EnableWorkflow = {}));
            var DisableWorkflow;
            (function (DisableWorkflow) {
                DisableWorkflow.name = "DisableWorkflow";
                DisableWorkflow.inProgress = { status: "inProgress" };
                DisableWorkflow.success = { status: "success" };
                DisableWorkflow.error = { status: "error" };
            })(DisableWorkflow = NotificationDefinitions.DisableWorkflow || (NotificationDefinitions.DisableWorkflow = {}));
            var CancelWorkflowRun;
            (function (CancelWorkflowRun) {
                CancelWorkflowRun.name = "CancelWorkflowRun";
                CancelWorkflowRun.inProgress = { status: "inProgress" };
                CancelWorkflowRun.success = { status: "success" };
                CancelWorkflowRun.error = { status: "error" };
            })(CancelWorkflowRun = NotificationDefinitions.CancelWorkflowRun || (NotificationDefinitions.CancelWorkflowRun = {}));
            var PauseWorkflowRun;
            (function (PauseWorkflowRun) {
                PauseWorkflowRun.name = "PauseWorkflowRun";
                PauseWorkflowRun.inProgress = { status: "inProgress" };
                PauseWorkflowRun.success = { status: "success" };
                PauseWorkflowRun.error = { status: "error" };
            })(PauseWorkflowRun = NotificationDefinitions.PauseWorkflowRun || (NotificationDefinitions.PauseWorkflowRun = {}));
            var ResumeWorkflowRun;
            (function (ResumeWorkflowRun) {
                ResumeWorkflowRun.name = "ResumeWorkflowRun";
                ResumeWorkflowRun.inProgress = { status: "inProgress" };
                ResumeWorkflowRun.success = { status: "success" };
                ResumeWorkflowRun.error = { status: "error" };
            })(ResumeWorkflowRun = NotificationDefinitions.ResumeWorkflowRun || (NotificationDefinitions.ResumeWorkflowRun = {}));
            var ResubmitWorkflowRun;
            (function (ResubmitWorkflowRun) {
                ResubmitWorkflowRun.name = "ResubmitWorkflowRun";
                ResubmitWorkflowRun.inProgress = { status: "inProgress" };
                ResubmitWorkflowRun.success = { status: "success" };
                ResubmitWorkflowRun.error = { status: "error" };
            })(ResubmitWorkflowRun = NotificationDefinitions.ResubmitWorkflowRun || (NotificationDefinitions.ResubmitWorkflowRun = {}));
            var CancelRun;
            (function (CancelRun) {
                CancelRun.name = "CancelRun";
                CancelRun.inProgress = { status: "inProgress" };
                CancelRun.success = { status: "success" };
                CancelRun.error = { status: "error" };
            })(CancelRun = NotificationDefinitions.CancelRun || (NotificationDefinitions.CancelRun = {}));
            var RegenerateAccessKey;
            (function (RegenerateAccessKey) {
                RegenerateAccessKey.name = "RegenerateAccessKey";
                RegenerateAccessKey.inProgress = { status: "inProgress" };
                RegenerateAccessKey.success = { status: "success" };
                RegenerateAccessKey.error = { status: "error" };
            })(RegenerateAccessKey = NotificationDefinitions.RegenerateAccessKey || (NotificationDefinitions.RegenerateAccessKey = {}));
            var UpdateAccessControl;
            (function (UpdateAccessControl) {
                UpdateAccessControl.name = "UpdateAccessControl";
                UpdateAccessControl.inProgress = { status: "inProgress" };
                UpdateAccessControl.success = { status: "success" };
                UpdateAccessControl.error = { status: "error" };
            })(UpdateAccessControl = NotificationDefinitions.UpdateAccessControl || (NotificationDefinitions.UpdateAccessControl = {}));
            var ExportToPowerApps;
            (function (ExportToPowerApps) {
                ExportToPowerApps.name = "ExportToPowerApps";
                ExportToPowerApps.inProgress = { status: "inProgress" };
                ExportToPowerApps.success = { status: "success" };
                ExportToPowerApps.error = { status: "error" };
            })(ExportToPowerApps = NotificationDefinitions.ExportToPowerApps || (NotificationDefinitions.ExportToPowerApps = {}));
            var WorkflowSettings;
            (function (WorkflowSettings) {
                WorkflowSettings.name = "WorkflowSettings";
                WorkflowSettings.inProgress = { status: "inProgress" };
                WorkflowSettings.success = { status: "success" };
                WorkflowSettings.error = { status: "error" };
            })(WorkflowSettings = NotificationDefinitions.WorkflowSettings || (NotificationDefinitions.WorkflowSettings = {}));
        })(NotificationDefinitions = ExtensionDefinition.NotificationDefinitions || (ExtensionDefinition.NotificationDefinitions = {}));
    })(ExtensionDefinition || (ExtensionDefinition = {}));
    return ExtensionDefinition;
});
